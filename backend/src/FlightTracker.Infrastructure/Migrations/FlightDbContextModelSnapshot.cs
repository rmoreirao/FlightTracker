// <auto-generated />
using System;
using FlightTracker.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace FlightTracker.Infrastructure.Migrations
{
    [DbContext(typeof(FlightDbContext))]
    partial class FlightDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0-preview.7.24405.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.HasPostgresExtension(modelBuilder, "timescaledb");
            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("FlightTracker.Domain.Entities.Airline", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("CHAR(2)");

                    b.Property<string>("LogoUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.HasKey("Code");

                    b.ToTable("Airlines");
                });

            modelBuilder.Entity("FlightTracker.Domain.Entities.Airport", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("CHAR(3)");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Country")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<decimal?>("Latitude")
                        .HasColumnType("numeric");

                    b.Property<decimal?>("Longitude")
                        .HasColumnType("numeric");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("Timezone")
                        .HasColumnType("text");

                    b.HasKey("Code");

                    b.ToTable("Airports");
                });

            modelBuilder.Entity("FlightTracker.Domain.Entities.FlightQuery", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasDefaultValueSql("gen_random_uuid()");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<DateTime>("DepartureDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DestinationCode")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime>("LastSearchedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("timestamp with time zone")
                        .HasDefaultValueSql("NOW()");

                    b.Property<string>("OriginCode")
                        .IsRequired()
                        .HasColumnType("CHAR(3)");

                    b.Property<DateTime?>("ReturnDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("SearchCount")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("DestinationCode");

                    b.HasIndex("OriginCode");

                    b.ToTable("FlightQueries");
                });

            modelBuilder.Entity("FlightTracker.Domain.Entities.PriceSnapshot", b =>
                {
                    b.Property<Guid>("QueryId")
                        .HasColumnType("uuid");

                    b.Property<string>("AirlineCode")
                        .HasColumnType("CHAR(2)");

                    b.Property<int>("Cabin")
                        .HasColumnType("integer");

                    b.Property<DateTime>("CollectedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<DateTime?>("ArrivalTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("DeepLink")
                        .HasColumnType("text");

                    b.Property<DateTime?>("DepartureTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("FlightNumber")
                        .HasColumnType("text");

                    b.Property<long>("Id")
                        .HasColumnType("bigint");

                    b.Property<int>("Stops")
                        .HasColumnType("integer");

                    b.HasKey("QueryId", "AirlineCode", "Cabin", "CollectedAt");

                    b.HasIndex("AirlineCode");

                    b.ToTable("PriceSnapshots");
                });

            modelBuilder.Entity("FlightTracker.Domain.Entities.FlightQuery", b =>
                {
                    b.HasOne("FlightTracker.Domain.Entities.Airport", "Destination")
                        .WithMany()
                        .HasForeignKey("DestinationCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightTracker.Domain.Entities.Airport", "Origin")
                        .WithMany()
                        .HasForeignKey("OriginCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Destination");

                    b.Navigation("Origin");
                });

            modelBuilder.Entity("FlightTracker.Domain.Entities.PriceSnapshot", b =>
                {
                    b.HasOne("FlightTracker.Domain.Entities.Airline", "Airline")
                        .WithMany()
                        .HasForeignKey("AirlineCode")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("FlightTracker.Domain.Entities.FlightQuery", "FlightQuery")
                        .WithMany("PriceSnapshots")
                        .HasForeignKey("QueryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("FlightTracker.Domain.ValueObjects.Money", "Price", b1 =>
                        {
                            b1.Property<Guid>("PriceSnapshotQueryId")
                                .HasColumnType("uuid");

                            b1.Property<string>("PriceSnapshotAirlineCode")
                                .HasColumnType("CHAR(2)");

                            b1.Property<int>("PriceSnapshotCabin")
                                .HasColumnType("integer");

                            b1.Property<DateTime>("PriceSnapshotCollectedAt")
                                .HasColumnType("timestamp with time zone");

                            b1.Property<decimal>("Amount")
                                .HasColumnType("numeric")
                                .HasColumnName("PriceAmount");

                            b1.Property<string>("Currency")
                                .IsRequired()
                                .HasMaxLength(3)
                                .HasColumnType("character varying(3)")
                                .HasColumnName("PriceCurrency");

                            b1.HasKey("PriceSnapshotQueryId", "PriceSnapshotAirlineCode", "PriceSnapshotCabin", "PriceSnapshotCollectedAt");

                            b1.ToTable("PriceSnapshots");

                            b1.WithOwner()
                                .HasForeignKey("PriceSnapshotQueryId", "PriceSnapshotAirlineCode", "PriceSnapshotCabin", "PriceSnapshotCollectedAt");
                        });

                    b.Navigation("Airline");

                    b.Navigation("FlightQuery");

                    b.Navigation("Price")
                        .IsRequired();
                });

            modelBuilder.Entity("FlightTracker.Domain.Entities.FlightQuery", b =>
                {
                    b.Navigation("PriceSnapshots");
                });
#pragma warning restore 612, 618
        }
    }
}
